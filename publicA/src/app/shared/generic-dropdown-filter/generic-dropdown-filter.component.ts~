import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { debounceTime, map, startWith } from 'rxjs/operators';

@Component({
  selector: 'app-generic-dropdown-filter',
  imports: [],
  templateUrl: './generic-dropdown-filter.component.html',
  styleUrl: './generic-dropdown-filter.component.css',
})
export class GenericDropdownFilterComponent<T> {
  @Input({ required: true }) data: T[] = [];
  @Input({ required: true }) displayFn!: (item: T) => string;

  @Input() value!: T;
  @Output() valueChange = new EventEmitter();

  filterControl = new FormControl();
  filteredItems$!: Observable<T[]>;

  ngOnInit() {
    this.filteredItems$ = this.filterControl.valueChanges.pipe(
      startWith(''),
      debounceTime(150),
      map((term) =>
        this.items.filter((item) => this.displayFn(item).toLowerCase().includes(term.toLowerCase()))
      )
    );
  }

  onSelect(item: T) {
    this.value = item;
    this.valueChange.emit(item); // ðŸ‘ˆ two-way binding works here
  }
}
